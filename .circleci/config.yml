version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point

    working_directory: ~/visualising-performance # directory where steps will run

    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-browsers # ...with this image as the primary container; this is where all `steps` will run
      - image: mongo:3.6.6

    steps: # a collection of executable commands

      - checkout # check out source code to working directory

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          key: visualising-performance-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline # gets the project dependencies

      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: visualising-performance-{{ checksum "pom.xml" }}

      - run: mvn package # run the actual tests

      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
          path: target/surefire-reports

      - store_artifacts: # store the uberjar as an artifact
          path: target/visualizingperformance-1.jar

      - persist_to_workspace:
          root: ~/visualising-performance
          paths:
            - '*'
  deploy:
    docker:
      - image: circleci/node:7.10
    working_directory: ~/visualising-performance
    steps:
      - attach_workspace:
          at: /tmp/visualising-performance
      - run:
          name: Move code from attached workspace
          command: mv /tmp/visualising-performance/* .

      - run: ls

      - restore_cache:
          keys:
          - serverless-dependency

      - run: npm install serverless

      - save_cache:
          paths:
            - node_modules
          key: serverless-dependency

      - run:
          name: Write secrets
          command: echo "{\"MONGO_CONNECTION_STRING\": \""$MONGO_CONNECTION_STRING"\"}" > secrets.json

      - run:
          name: Deploy API to AWS
          command: ./node_modules/.bin/sls deploy

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master